// <auto-generated />
using System;
using Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(HotelContext))]
    [Migration("20240201125736_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "action_type", new[] { "infinite", "positive", "negative" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "place", new[] { "hotel", "cp1", "cp2", "amusement_park" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Skipass.SkipassRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Balance")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TariffId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VisitorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TariffId");

                    b.HasIndex("VisitorId");

                    b.ToTable("Skipasses");
                });

            modelBuilder.Entity("Domain.Entities.Tariff.TariffRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tariffs");
                });

            modelBuilder.Entity("Domain.Entities.Visitor.VisitorRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Passport")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("Domain.Entities.VisitorsAction.VisitorActionsRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BalanceChange")
                        .HasColumnType("integer");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SkipassId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SkipassRecordId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TypeOfAction")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SkipassRecordId");

                    b.ToTable("VisitorActions");
                });

            modelBuilder.Entity("Domain.Entities.Skipass.SkipassRecord", b =>
                {
                    b.HasOne("Domain.Entities.Tariff.TariffRecord", "Tariff")
                        .WithMany("Skipasses")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Visitor.VisitorRecord", "Visitor")
                        .WithMany("Skipasses")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tariff");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("Domain.Entities.VisitorsAction.VisitorActionsRecord", b =>
                {
                    b.HasOne("Domain.Entities.Skipass.SkipassRecord", "SkipassRecord")
                        .WithMany()
                        .HasForeignKey("SkipassRecordId");

                    b.Navigation("SkipassRecord");
                });

            modelBuilder.Entity("Domain.Entities.Tariff.TariffRecord", b =>
                {
                    b.Navigation("Skipasses");
                });

            modelBuilder.Entity("Domain.Entities.Visitor.VisitorRecord", b =>
                {
                    b.Navigation("Skipasses");
                });
#pragma warning restore 612, 618
        }
    }
}
